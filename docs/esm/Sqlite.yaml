# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# The content of this file was derived from:
source: toolkit/modules/Sqlite.sys.mjs

layout: esm.md
tags: [esm]
url: resource://gre/modules/Sqlite.sys.mjs

exports:
  - name: Sqlite
    kind: object

    properties:
      - name: TRANSACTIONS_TIMEOUT_MS
        kind: variable
        type: number
        description: |
          The maximum time to wait before considering a transaction stuck and
          issuing a ROLLBACK, see `executeTransaction`. Could be modified by tests
      - name: openConnection
        kind: function

        description: |
          Opens a connection to a SQLite database.

        args:
          - name: options
            type: '{ path: string, sharedMemoryCache?: bool, shrinkMemoryOnConnectionIdleMS?: number, readOnly?: bool, ignoreLockingMode?: bool, vacuumOnIdle?: bool, incrementalVacuum?: bool, pageSize?: number }'
            description: |
              **path:** The filesystem path of the database file to open. If the
                   file does not exist, a new database will be created.

              **sharedMemoryCache:** Whether multiple connections to the database
                   share the same memory cache. Sharing the memory cache likely results
                   in less memory utilization. However, sharing also requires connections
                   to obtain a lock, possibly making database access slower. Defaults to
                   true.

              **shrinkMemoryOnConnectionIdleMS:** If defined, the connection
                   will attempt to minimize its memory usage after this many
                   milliseconds of connection idle. The connection is idle when no
                   statements are executing. There is no default value which means no
                   automatic memory minimization will occur. Please note that this is
                   *not* a timer on the idle service and this could fire while the
                   application is active.

              **readOnly:** Whether to open the database with SQLITE_OPEN_READONLY
                   set. If used, writing to the database will fail. Defaults to false.

              **ignoreLockingMode:** Whether to ignore locks on the database held
                   by other connections. If used, implies readOnly. Defaults to false.
                   USE WITH EXTREME CAUTION. This mode WILL produce incorrect results or
                   return "false positive" corruption errors if other connections write
                   to the DB at the same time.

              **vacuumOnIdle:** Whether to register this connection to be vacuumed
                   on idle by the VacuumManager component.
                   If you're vacuum-ing an incremental vacuum database, ensure to also
                   set incrementalVacuum to true, otherwise this will try to change it
                   to full vacuum mode.

              **incrementalVacuum:** if set to true auto_vacuum = INCREMENTAL will
                   be enabled for the database.
                   Changing auto vacuum of an already populated database requires a full
                   VACUUM. You can evaluate to enable vacuumOnIdle for that.

              **pageSize:** This allows to set a custom page size for the
                   database. It is usually not necessary to set it, since the default
                   value should be good for most consumers.
                   Changing the page size of an already populated database requires a full
                   VACUUM. You can evaluate to enable vacuumOnIdle for that.

        returns:
          type: 'Promise<OpenConnection>'

      - name: cloneStorageConnection
        kind: function

        description: |
          Creates a clone of an existing and open Storage connection.  The clone has
          the same underlying characteristics of the original connection and is
          returned in form of an OpenedConnection handle.

        args:
          - name: options
            type: '{ connection: mozIStorageAsyncConnection, readOnly?: boolean, shrinkMemoryOnConnectionIdleMS?: number }'
            description: |
              **connection:** The original Storage connection
                  to clone.  It's not possible to clone connections to memory databases.

              **readOnly:** - If true the clone will be read-only.  If the
                  original connection is already read-only, the clone will be, regardless
                  of this option.  If the original connection is using the shared cache,
                  this parameter will be ignored and the clone will be as privileged as
                  the original connection.

              **shrinkMemoryOnConnectionIdleMS:** If defined, the connection
                  will attempt to minimize its memory usage after this many
                  milliseconds of connection idle. The connection is idle when no
                  statements are executing. There is no default value which means no
                  automatic memory minimization will occur. Please note that this is
                  *not* a timer on the idle service and this could fire while the
                  application is active.

        returns:
          type: 'Promise<OpenedConnection>'

      - name: wrapStorageConnection
        kind: function

        description: |
          Wraps an existing and open Storage connection.  The wrapper has the same
          underlying characteristics of the original connection and is returned in
          form of an OpenedConnection handle.

        args:
          - name: options
            type: '{ connection: mozIStorageAsyncConnection }'
            description: |
              **connection:** The original Storage connection
                  to wrap.

        returns:
          type: 'Promise<OpenedConnection>'

      - name: shutdown
        kind: variable

        description: |
          Shutdown barrier client. May be used by clients to perform last-minute 
          cleanup prior to the shutdown of this module. 

          See the documentation of `AsyncShutdown.Barrier.prototype.client`.
